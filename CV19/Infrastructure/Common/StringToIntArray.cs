using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Markup;

namespace CV19.Infrastructure.Common
{
    /*Результатом работы этого расширения разметки будет класс object, и дизайнер студии не сможет понять тип возвращаемого значения. Если есть желание конкретизировать тип,
     т.е. указать разметке, что именно является результатом, можно добавить aтрибут, в котором объяснить системе, что является результатом. После этого студия начнёт вести чебя
    более адекватно с этим расширением.:*/
    [MarkupExtensionReturnType(typeof(int[]))]

    /*Расширение разметки. Расширения разметки могут быть полезны в корнвертерах (см. класс Converter)*/

    /*Предположим, что нам нужно формировать массив чисел на сонове строки.
     Мы хотим добиться того, чтобы мы имели возможность написать в разметке класс в фигурных скобках: ItemsSource="{common:StringToArray '1;2;3;4;5'}" или
    ItemsSource="{common:StringToArray Str='1;2;3;4;5'}", и хотим, чтобы в ответ вернулся массив чисел. Для этого укажем, что этот класс является наследником класса
    MarkupExtension*/
    // Создадим класс-функцию для разметки StringToIntArray:
    internal class StringToIntArray : MarkupExtension
    {      
        // Этот метод является самым главным. В этом методе нужно вернуть объект, который в результате будет вставлен в разметку. В этом методе можео прописать любую логику,
        // которая будет выполняться в момент, когда формируется разметка:
        public override object ProvideValue(IServiceProvider sp) =>        
            /* Берём исходную строку Str, разбиваем её по указанному разделителю {Separator}, отбрасывая все пуситые элементы StringSplitOptions.RemoveEmptyEntries.
            После этого, если там ничего не будет, то получится пустой массив .DefaultIfEmpty()*, а если что-то будет, то мы каждый элемент парсим в целое число .Select(int.Parse)
            и полученный результат превращаем в массив .ToArray(), который возвращается как результат работы этого метода:*/
            Str.Split(new[] {Separator}, StringSplitOptions.RemoveEmptyEntries)
                .DefaultIfEmpty()
                .Select(int.Parse)
                .ToArray();
        /*После этого после компиляции разметка перестаное ругаться. И теперь класс StringToIntArray стал расширением разметки, который применяется для преобразования данных.
         Таким образом можно дописывать язык разметки, используя указанные расширения (см. разметку) и реализуя некоторую логику, которую необходимо выполнить, чтобы
        получить значение, которое будет дальше использовано в разметке как значение какого-то свойства.*/


        [ConstructorArgument("Str")]
        public string Str { get; set; }

        public char Separator { get; set; } = ';';

        // Конструкторы:
        public StringToIntArray() { }
        public StringToIntArray(string Str) => this.Str = Str;


    }
}
