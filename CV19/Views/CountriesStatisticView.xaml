<!--Чтобы передать частичному предсавлению ту вью-модель, из которой она будет брать данные, с которой будет сотрудничать, внктри представления CountriesStatisticView неверху, в разметке
    укажем, что будет вью-моделью, то есть, что будет сонтекстом данных. Для этого используем специальное пространство имён xmlns:d="http://schemas.microsoft.com/expression/blend/2008",
    которое предназначено для взаимодействия именно с дизайнером в студии, либо в блэнде. Для него есть специальный набор атрибутов, начинающихся с d:, и там нужно указать DataContext.
    добавим двк строчки: xmlns:vm="clr-namespace:CV19.ViewModels" и d:DataContext="{d:DesignInstance vm:CountriesStatisticViewModel}". После этого в кнопке мы сможем увидеть подсказки.
    На самом деле все эти строчки не нужны. Без них всё равно всё будет работать., но эти две строчки будут выбрасываться компилятором, так как выставлена деректива mc:Ignorable="d"
    (игнорировать все пространства имён d). То есть все атрибуты пространства имём будут использоваться только в процессе разработки. Таким образом можно просто привязываться к чему угодно,
    и в процессе выполнения привязка будет искать эти данные динамически. А для того, чтобы студия помогала мы и добавляем строку d:DataContext="{d:DesignInstance vm:CountriesStatisticViewModel}".
    Кроме того, мы можем создать в CountriesStatisticViewModel.cs дополнительный конструктор и использовать его в процессе разработки. Данный конструктор создаст объект и бутед выдавать данные
    по этому объекту. А в строку добавим код: d:IsDesignTimeCreateble=True-->
    <UserControl x:Class="CV19.Views.CountriesStatisticView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" mc:Ignorable="d" 
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:l="clr-namespace:CV19"             
             xmlns:m="clr-namespace:CV19.Models"
             xmlns:vm="clr-namespace:CV19.ViewModels"
             xmlns:fa="http://schemas.fontawesome.com/icons/"
             xmlns:c="clr-namespace:CV19.Infrastructure.Converters"
             xmlns:sys="clr-namespace:System;assembly=System.Runtime"
             d:DataContext="{d:DesignInstance vm:CountriesStatisticViewModel, d:IsDesignTimeCreatable=True}"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <c:LocationPointToStr x:Key="LocationConverter"/>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="230"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>        
        <GridSplitter/>
        <GroupBox Grid.Column="0" Header="Список стран">
            <DockPanel>
                <Button DockPanel.Dock="Top" Command="{Binding RefreshDataCommand}">
                    <StackPanel Orientation="Horizontal">
                        <fa:ImageAwesome Height="12" Icon="Solid_ArrowDown" Margin="0,0,3,0"/>
                        <TextBlock Text="Загрузить данные"/>
                    </StackPanel>
                </Button>
                <ListBox ItemsSource="{Binding Countries}" SelectedItem="{Binding SelectedCountry}">
                    <ListBox.ItemTemplate>
                        <!--Укажем, как мы хотим видеть каждую страну в списке:-->
                        <DataTemplate DataType="m:CountryInfo">
                            <TextBlock>
                                <TextBlock Text="{Binding Name}"/>
                                <!--<TextBlock Text="{Binding Location}"/>-->
                                <!--Свойство Location имеет тип Piont, а нам нужно не Point, а строка и нужен свой собственный формат преобразования в строку.
                                Кроме того, мы хотим реализовать свой собственный формат преобразования объекта Point в строку. Для этого есть свойство Converter,
                                который можно добавить в привязку. В это свойство можно передать объект типа IValueConverter. То есть нам нужно реальзовать
                                свой собственный класс, который будет реальзовывать интерфейс IValueConverter и в нём описать логику, как один тип данных, 
                                или одно значение будет преобразовываться в другое. Для этого в папке Infrastructure добавим папку Converters и класс.-->
                                <!--Использование конвертера может быть выполнено по разному.
                                1. Самый дурацкий способ - это развернуть свойство Text и использовать привязку не как расширение, а как элемент,
                                а дальше установить свойство конвертера (Этот код писать, не нажимая кнопку "Собрать", иначе будет ошибка.).-->
                                <!--<TextBlock>
                                    <TextBlock.Text>
                                        <Binding Path="Location" StringFormat="({0})">
                                            <Binding.Converter>
                                                <c:LocationPointToStr/>
                                            </Binding.Converter>
                                        </Binding>
                                    </TextBlock.Text>
                                </TextBlock>-->
                                <!--Но, при этом я нас появляется проблема, что, сколько у нас будет создано стран в списке ListBox, столько у ная будет создано
                                привязок, и в каждой привязке будет создан свой собственный объект конвертации данных, что является пустой тратой памяти.
                                Поэтому конвертер имеет смысл выносить в статические ресурсы. Добавим ресурсы в верхнюю часть кода (если вынести в DataTemplate, 
                                то дизайнер подглючивает почему-то) и довавим ниже TextBlock.
                                Таким образом можно самостоятельно определять алгоритм преобразования одного значения в другое:-->
                                <TextBlock Text="{Binding Location, Converter={StaticResource LocationConverter}, StringFormat=({0})}"/>
                            </TextBlock>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </DockPanel>
        </GroupBox>
        <GroupBox Grid.Column="1" Header="Информация">
            <Grid>
                <Grid.Resources>
                    <sys:Double x:Key="Value3">3</sys:Double>
                    
                    <c:Ratio K="2" x:Key="Ratio2"/>
                    <c:Linear K="5" B="{StaticResource Value3}" x:Key="Linear_K5_B3"/>

                    <c:CompositeConverter x:Key="TestConverter">
                        <c:CompositeConverter.First>
                            <c:Linear K="5"/>
                        </c:CompositeConverter.First>
                        <c:CompositeConverter.Second>
                            <c:Linear K="-3" B="10"/>
                        </c:CompositeConverter.Second>
                    </c:CompositeConverter>
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <GridSplitter VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Panel.ZIndex="1000"/>
                <!--Приведём пример применения Конвертера вместе со слайдером:-->
                <!--ToolTip="{Binding Value, RelativeSource={RelativeSource Self}} - к самому себе делаем привязку и берем свойство Value.-->
                <Slider Grid.Row="0" Name="ValueSlider" Maximum="100"
                        ToolTip="{Binding Value, RelativeSource={RelativeSource Self}}"/>
                <TextBox Grid.Row="0" Margin="0,30,0,0"
                         VerticalAlignment="Top" HorizontalAlignment="Left" Width="200"
                           Text="{Binding Value, ElementName=ValueSlider, Converter={StaticResource TestConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                <!--На данный момент при движении слайдера значение меняется в пределах от 0 до 10.
                Добавим конвертер, который будет изменять с некоорым коэффициентом это значение. Для этого создадим ещё один конвертер.-->
            </Grid>
        </GroupBox>
    </Grid>
</UserControl>
