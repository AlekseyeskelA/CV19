<!--Директивы "xmlns=", "mlns:x=", "xmlns:d=", "xmlns:mc=", которые указываются в начале разметки - это подключение пространств имён WPF (это некая строка, оформленная в виде интернет-адреса).
    Каждая из этих строк подключаем много пространств имён. Главное пространство имён подключается строчкой "xmlns=". Оно служит пространством имён для всей xaml-разметки.
    "mlns:x=", "xmlns:d=", "xmlns:mc=" - дополнительные пространства имён. x, d, mc - псевдонимы пространств имён, которые в последствии могут использоваться в самой разметке.
    Можно подключать дополнительные пространства имён спомощью директивы "clr-namespace:".
    Добавляем пространство имём xmlns:vm="clr-namespace:CV19.ViewModels", после чего внутри свойства <Window.DataContext></Window.DataContext> мы можем создать ViewModel вручную.
    <vm:MainWindowViewModel/> - указываеам, что теперь контекстом данных является объект класса MainWindowViewModel, который будет здесь создан. И теперь об этом знает дизайнер-студия,
    и будет делать подсказки при использовании этого класса внутри разметки.
    Вместо Title="MainWindow" напишем Title={}. {} означают, что внутри будут находиться не обычные значения, а расширение разметки.
    Расширение Binding - часть разметки, средство, которое устанавливает привязку к данным между свойствами двух объектов или одного объекта.
    Если есть затруднения с тем, что нужно написать, то можно написать параметр Path=, и среда разоработки выдаст перечень того, к чему можно привязаться.
    Первый параметр после Binding указывает имя свойство, к которому можно привязаться.-->
<Window x:Class="CV19.MainWindow"        
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:cmd="clr-namespace:CV19.Infrastructure.Commands"
        xmlns:decanat="clr-namespace:CV19.Models.Decanat"
        xmlns:vm="clr-namespace:CV19.ViewModels"
        xmlns:local="clr-namespace:CV19"
        xmlns:view="clr-namespace:CV19.Views"
        xmlns:oxy="http://oxyplot.org/wpf"
        xmlns:sys="clr-namespace:System;assembly=System.Runtime"
        xmlns:system="clr-namespace:System;assembly=System.Runtime.Extensions"
        xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        Title="{Binding Path=Title}"
        DataContext="{Binding MainWindowModel, Source={StaticResource Locator}}"
        Height="450" Width="800">
    <!--На уровне окна можно добавить команду на закрытие:-->
    <Window.InputBindings>
        <KeyBinding Modifiers="Ctrl" Key="Q" Command="{Binding CloseApplicationCommand}"/>
    </Window.InputBindings>
    <!--Внутри любого визуального элемента есть единое свойство DataContext, которое иерархически насдедуется внутри дерева интерфейса.
    То есть, если определить DataContext на уровне окна, то все вложенные элементы получают значение этого самого DataContextа.
    Если переопределить DataContext где-то уровнем ниже, то всё, что находится ниже по дереву интерфейса, изменит свой контекст данных.
    Можно написать DataContext="" после Title="MainWindow" Height="450" Width="800", а можно развернуть так: <Window.DataContext></Window.DataContext>-->
    <!--Каждый тег <...> - это объект, который рождается в момент загрузки окна.-->
    <!--После того, как Базовый класс ViewModel унаследовался от MarkupExtention, ниже расположенный DataContext можно убрать, а вверхней части написать
    DataContext="{vm:MainWindowViewModel}". При этом мы контролируем момент, когда модель встраивается в контекст данных окна, мы можем сделать не совсем хорошую вешь,
    а именно получить доступ к самомому окну изнутри модели, что MVVM запрещает, но иногда можно:-->
    <!--<Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>-->
    <!--В словать ресурсов можно что-то поместить, только указав ключ. Сделаем ключ такой же, как и класс: "CloseApplicationCommand"-->
    <Window.Resources>
        <cmd:CloseApplicationCommand x:Key="CloseApplicationCommand"/>
        <!--Определение стиля всех кнопок на уровне всего окна:-->
        <!--<Style TargetType="Button">
            <Setter Property="Background" Value="White"/>
        </Style>-->
    </Window.Resources>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Файл">
                <!--Вызов команды из ViewModel:-->
                <!--<MenuItem Header="Выход" Command="{Binding CloseApplicationCommand}"/>-->
                <!--Альтернативный вариант написания команды (на примере отдельной команды из Command):-->

                <!--Команда "по месту". Здесь в разметку Parser-xaml создаст объект и вставит его в свойство Command. Если какая-то много где используется (например, в других окнах или в шаблонах),
                    То такой подход быдет слишком расточителен для памяти, особенно, если используется DataGrid с множеством строк, внутрь каждой строки будет помещён визуальный объект
                    и внутрь этого объекта помещена команда. Во первых они будут очень долго создаваться, а во вторых они съедят много памяти-->
                <!--<MenuItem Header="Выход">-->
                <!--<MenuItem.Command>
                        <cmd:CloseApplicationCommand/>
                    </MenuItem.Command>-->
                <!--Поэтому (да и вообще всегда), такие команды имеет смысл вынести в отдельные ресурсы, которые будут доступны той разметке, в которой они нужны.
                    То есть если какая-то команда используется исключительно в пределах окна, то имеет смысл в пределах окна создать область ресурсов и туда поместить эту самую команду,
                    которая в последствии внутри всего окна будет использоваться.
                    Если эта команда уровня всего приложения, и она используется в нескольких окнах, тогда имеет смысл завестя словарь ресурсов, и подключить его на уровне всего приложения
                    в файле App.xaml нутри "Application.Resources", и тогда эту команду можно будет, как ресурс, подключить в любом месте разметки, и она небудет сжирать память каждый раз.
                    То есть она лишь в одном месте будет объявлена, и её можно будет оттуда использовать.
                    Для уровня данного окна, нужно создать ресурс этого окна (см. "Window.Resources" вверху) (ресурсы можно объявить на любом уровне разметки), и после этого используем
                    команду, как ресурс:-->
                <MenuItem Header="Выход" Command="{StaticResource CloseApplicationCommand}"/>
            </MenuItem>
            <MenuItem Header="Помощь">
                <MenuItem Header="О программе"/>
            </MenuItem>
        </Menu>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem MinWidth="150" MaxWidth="350">
                <TextBlock Text="{Binding Status}"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Width="120" Height="14" Value="30"/>
            </StatusBarItem>
            <StatusBarItem Content="{Binding SelectedPageIndex}"/>
            <!--Чтобы всё правильно работало и индексы не выходили за количество вкладок, нужно кое-чего добавить (информацию о количестве вкладок).-->
        </StatusBar>

        <!--Модель-представления ничего не должна знать о визуальных элементах, но при этом можно ввести внутрь модели-представления индекс активной вкладки. Для этого возьмём свойство TabControl SelectedIndex
         и свяжем его со свойством SelectedPageIndex во ViewMosel-->
        <TabControl>
            <TabItem Header="Статистика">
                <!--Передаём нашему частичному предсавлению ту вью-модель, из которой она будет брать данные, с которой будет сотрудничать. А внктри представления CountriesStatisticView неверху, в разметке
                укажем, что будет вью-моделью, то есть, что будет сонтекстом данных. Для этого используем специальное пространство имён xmlns:d="http://schemas.microsoft.com/expression/blend/2008",
                которое предназначено для взаимодействия именно с дизайнером в студии, либо в блэнде. Для него есть специальный набор атрибутов, начинающихся с d:, и там нужно указать DataContext.
                xmlns:vm=-->
                <view:CountriesStatisticView DataContext="{Binding CountriesStatistic}"/>
            </TabItem>
            <!--Первый способ запуска приложения - это непосредственно либо запуск, липо пуск под отладчиком. Если приложение работает правильно, то здесь проблем не будет.
            Второй вариант запуска приложения - это запуск под отладчиком в дизайнере, когда мы видим картинку окна.
            Проблема в том, что рабочим каталогом приложения, запущенного нормальным образом и запущенного под отладчиком будут разными. Выведем путь каталога, задействованного 
            под отладчиком:-->
            <TabItem Header="Отладка">
                <!--<TextBlock Text="{x:Static system:Environment.CurrentDirectory}"/>-->
                <!--Изменим это: Сделаем хитрость, которая позволит нам извлечь текущий каталог приложения для рабочего кода. В классе App свойство IsDesignMode, которое говорит нам, работаем мы
                под дизайнером или же приложение запущено  в нормальном режиме. Состояние этого свойства меняется при вызове метода OnStartUp (дизайнер не вызывает метод OnStartUp, и 
                состояние свойства не меняется. Далее см. класс App, свойство CurrentDirectory).-->
            </TabItem>
        </TabControl>
    </DockPanel>

</Window>
