<!--Директивы "xmlns=", "mlns:x=", "xmlns:d=", "xmlns:mc=", которые указываются в начале разметки - это подключение пространств имён WPF (это некая строка, оформленная в виде интернет-адреса).
    Каждая из этих строк подключаем много пространств имён. Главное пространство имён подключается строчкой "xmlns=". Оно служит пространством имён для всей xaml-разметки.
    "mlns:x=", "xmlns:d=", "xmlns:mc=" - дополнительные пространства имён. x, d, mc - псевдонимы пространств имён, которые в последствии могут использоваться в самой разметке.
    Можно подключать дополнительные пространства имён спомощью директивы "clr-namespace:".
    Добавляем пространство имём xmlns:vm="clr-namespace:CV19.ViewModels", после чего внутри свойства <Window.DataContext></Window.DataContext> мы можем создать ViewModel вручную.
    <vm:MainWindowViewModel/> - указываеам, что теперь контекстом данных является объект класса MainWindowViewModel, который будет здесь создан. И теперь об этом знает дизайнер-студия,
    и будет делать подсказки при использовании этого класса внутри разметки.
    Вместо Title="MainWindow" напишем Title={}. {} означают, что внутри будут находиться не обычные значения, а расширение разметки.
    Расширение Binding - часть разметки, средство, которое устанавливает привязку к данным между свойствами двух объектов или одного объекта.
    Если есть затруднения с тем, что нужно написать, то можно написать параметр Path=, и среда разоработки выдаст перечень того, к чему можно привязаться.
    Первый параметр после Binding указывает имя свойство, к которому можно привязаться.-->
<Window x:Class="CV19.MainWindow"        
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:cmd="clr-namespace:CV19.Infrastructure.Commands"
        xmlns:vm="clr-namespace:CV19.ViewModels"
        xmlns:local="clr-namespace:CV19"        
        Title="{Binding Path=Title}"
        Height="450" Width="800">
    <!--На уровне окна можно добавить команду на закрытие:-->
    <Window.InputBindings>    
    <KeyBinding Modifiers="Ctrl" Key="Q" Command="{Binding CloseApplicationCommand}"/>
    </Window.InputBindings>
    <!--Внутри любого визуального элемента есть единое свойство DataContext, которое иерархически насдедуется внутри дерева интерфейса.
    То есть, если определить DataContext на уровне окна, то все вложенные элементы получают значение этого самого DataContextа.
    Если переопределить DataContext где-то уровнем ниже, то всё, что находится ниже по дереву интерфейса, изменит свой контекст данных.
    Можно написать DataContext="" после Title="MainWindow" Height="450" Width="800", а можно развернуть так: <Window.DataContext></Window.DataContext>-->
    <!--Каждый тег <...> - это объект, который рождается в момент загрузки окна.-->
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    <!--В словать ресурсов можно что-то поместить, только указав ключ. Сделаем ключ такой же, как и класс: "CloseApplicationCommand"-->
    <Window.Resources>
        <cmd:CloseApplicationCommand x:Key="CloseApplicationCommand"/>
    </Window.Resources>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Файл">
                <!--Вызов команды из ViewModel:-->
                <!--<MenuItem Header="Выход" Command="{Binding CloseApplicationCommand}"/>-->
                <!--Альтернативный вариант написания команды (на примере отдельной команды из Command):-->
                
                    <!--Команда "по месту". Здесь в разметку Parser-xaml создаст объект и вставит его в свойство Command. Если какая-то много где используется (например, в других окнах или в шаблонах),
                    То такой подход быдет слишком расточителен для памяти, особенно, если используется DataGrid с множеством строк, внутрь каждой строки будет помещён визуальный объект
                    и внутрь этого объекта помещена команда. Во первых они будут очень долго создаваться, а во вторых они съедят много памяти-->
                    <!--<MenuItem Header="Выход">-->    
                    <!--<MenuItem.Command>
                        <cmd:CloseApplicationCommand/>
                    </MenuItem.Command>-->
                    <!--Поэтому (да и вообще всегда), такие команды имеет смысл вынести в отдельные ресурсы, которые будут доступны той разметке, в которой они нужны.
                    То есть если какая-то команда используется исключительно в пределах окна, то имеет смысл в пределах окна создать область ресурсов и туда поместить эту самую команду,
                    которая в последствии внутри всего окна будет использоваться.
                    Если эта команда уровня всего приложения, и она используется в нескольких окнах, тогда имеет смысл завестя словарь ресурсов, и подключить его на уровне всего приложения
                    в файле App.xaml нутри "Application.Resources", и тогда эту команду можно будет, как ресурс, подключить в любом месте разметки, и она небудет сжирать память каждый раз.
                    То есть она лишь в одном месте будет объявлена, и её можно будет оттуда использовать.
                    Для уровня данного окна, нужно создать ресурс этого окна (см. "Window.Resources" вверху) (ресурсы можно объявить на любом уровне разметки), и после этого используем
                    команду, как ресурс:-->
                <MenuItem Header="Выход" Command="{StaticResource CloseApplicationCommand}"/>            
            </MenuItem>
            <MenuItem Header="Помощь">
                <MenuItem Header="О программе"/>
            </MenuItem>
        </Menu>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem MinWidth="150" MaxWidth="350">
                <TextBlock Text="{Binding Status}"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Width="120" Height="14" Value="30"/>
            </StatusBarItem>
        </StatusBar>
        <TabControl>
            <!--<TabItem Header="Вкладка 1">-->
                <!--Свойство Header принимает тип object. Это значит, что его можно развернуть следующим образом и внутри создать разметку:-->
            <TabItem>
                <TabItem.Header>
                    <!--Обычно это StackPanel горизонтальной ориентации внутри которой лежит текстовый блок и ещё что-нибудь, что нам необходимо, например, иконки:-->
                    <StackPanel Orientation="Horizontal">
                        <!--Если иконка в виде картинки, то создаём элемент Image, в котором указываем ОТНОСИТЕЛЬНЫЙ (Не абсолютный. Если указать абсолютный путь
                        и перейти на другой компьютер, то возникнет проблема) путь к самой картинке, и компилятор добавит её как ресурс к приложению:-->
                        <!--<Image Source="..."></Image>-->
                        <!--А мы в качестве иконок будем использовать шрифт на fontawesome.com. В этом случае у нас будет векторная иконка. Для этого в разделе "Зависимости" можно подклдючитьм пакет путем
                        добавления ссылки (щелчок правой кнопкой мыши) (либо, если проект .Net Framework, то есть пакеты всей платформы, либо можно использовать ссылки на проекты внутри наего решения,
                        либо через раздел "Обзор" можно добавить любую библиотеку, указав, где она расположена). Так делали раньше, пока не появился менеджер пакетов NuGet.
                        Мы воспользуемся NuGet (Щелчок правой кнопкой мыши на CV19 (если уентрализовано, то на "Решение CV19)) и выберем пакет FontAwesome.WPF (лучше применять для .Net Framework)
                        или FontAwesome5 (для .Net Core). NuGet подбирает и скачивает последнюю версию пакета и другие пакеты под версию нашего проекта, необходимые для его работы,
                        а также автоматически добавляет ссылки к нашему приложению. В .Net Framework они будут видны. Также вверху нужно добавить пространство имён пакета FontAwesome5:-->
                        <!--Обязательно нужно задать высоту, иначе вся разметка "уедет". (У данных пакетов, само собой, есть аналоги, например, MaterialDesignThemes от Google (см. CV19WPFTest).)-->
                        <fa:ImageAwesome Icon="Regular_File" Height="13" Margin="0,0,5,0"
                                         Foreground="Red"/>
                        <TextBlock Text="Вкладка 1"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="15*"/>
                        <RowDefinition Height="82*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="153*"/>
                        <ColumnDefinition Width="641*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle Grid.Column="0" Grid.Row="0"
                               Margin="5,7,5,7"
                               Fill="Blue" Stroke="Red"
                               StrokeThickness="3"
                               RadiusX="5" RadiusY="7"/>
                    <!--У эллипса нет понятия команды (нет свойства "Command"), но мы хотим, чтобы при щелчке по эллипсу срабатывала команда закрытия приложения.
                    К любому визуальному элементу можно добавить привязки ввода (мышка или клавиатура).-->
                    <Ellipse Grid.Column="1" Grid.Row="0"
                             Fill="Red" Stroke="Blue"
                             StrokeThickness="3">
                        <Ellipse.InputBindings>
                            <MouseBinding Command="{Binding CloseApplicationCommand}"
                                          MouseAction="LeftDoubleClick"/>
                        </Ellipse.InputBindings>
                    </Ellipse>                        
                        <GridSplitter Grid.Column="0" Grid.Row="0" Grid.RowSpan="2"
                                  HorizontalAlignment="Right"
                                  Width="4"/>
                </Grid>
            </TabItem>
            <TabItem Header="Вкладка 2"></TabItem>
        </TabControl>
    </DockPanel>

</Window>
