<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.fontawesome.com/icons/">

    <!--Можно подключать словари ресурсы в том месте, где они нужны, лобо определить этот словарь ресурсов в корневом элементе App.xaml в Application.Resources на уровне всего приложения-->
    
    <!--В качестве типа данных стиля можно указывать не Button, а ButtonBase (базовый класс кнопки). В этом случае данный стиль можно будет применить не только к классу Button,
        но и ToggleButton (залипающая кнопка):-->
    <Style x:Key="BtnBase" TargetType="ButtonBase">
        <Setter Property="Background" Value="{StaticResource WhiteBrush}"/>
    </Style>

    <!--После создания базового стиля, наследуем от него стиль по умолчанию для нашей кнопки:-->
    <Style TargetType="Button" BasedOn="{StaticResource BtnBase}"/>
    <Style TargetType="ToggleButton" BasedOn="{StaticResource BtnBase}"/>

    <Style x:Key="PrimaryBtn" TargetType="Button" BasedOn="{StaticResource BtnBase}">
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="DengerBtn" TargetType="Button" BasedOn="{StaticResource BtnBase}">
        <Setter Property="Background" Value="{StaticResource RedBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
    </Style>

   <!--Стандартная разметка кнопки. Получена кликом правой кнопкой мыши на кнопке Правка шаблона -> Правка копии-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Избавимся от лишних ресурсов, чтобы они не захламляли разметку наших стилей. Выставим цвета некоторых элементов вручную (свои цвета). Для этого закомментируем (удалим) некоторые предустановленные цвета:-->
    <!--<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>-->
    <!--<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>-->
    <!--<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>-->
    <!--<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>-->
    <!--<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>-->


    <!--ControlTemplate можно вынести, как отдельный элемент разметки (точнее, ресурс). Для этого нужно задать ключ. После этого внутри стиля его надо использовать как статический ресурс:-->
    <ControlTemplate x:Key="CustomButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border" CornerRadius="5"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="true">
            <!--<ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
            <DockPanel>                
                <ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>            
            <Trigger Property="IsMouseOver" Value="true">
                <!--Анимация может применяться и в триггерах. У триггеров есть два параметра: EnterActions и ExitActions, и внутри них могут быть анимации:-->
                <!--<Trigger Property="IsMouseOver" Value="true" EnterActions="" ExitActions="">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation>
                                --><!--Здесь находится анимация, которая происходит, когда значение свойства IsMouseOver переходит в состояние True.--><!--                                
                            </ColorAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation>
                                --><!--Здесь находится анимация, которая происходит, когда значение свойства IsMouseOver переходит в состояние False.--><!--
                            </ColorAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>-->
                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>-->
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>-->
                <!--<Setter Property="Background" TargetName="border" Value="Blue"/>-->
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource WhiteBrush}"/>
                <!--Добавим Foreground:-->
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>-->
                <Setter Property="Background" TargetName="border" Value="DarkBlue"/>
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>-->
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>-->
                <Setter Property="BorderBrush" TargetName="border" Value="DarkGray"/>
                <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>-->
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="DarkGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Эффекты, для экономии памяти, имеет смысл также задавать в виде ресурсов:-->
    <DropShadowEffect x:Key="ShadowDepth1" ShadowDepth="1"></DropShadowEffect>
    
    
    <ControlTemplate x:Key="CheckButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border" CornerRadius="5"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="true">
            <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                       Margin="{TemplateBinding Padding}">
                <fa:ImageAwesome Height="12" Icon="Solid_Check" Foreground="LightGreen" Margin="0,0,3,0" Effect="{StaticResource ShadowDepth1}"/>
                <ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False"
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">

                <Setter Property="Background" TargetName="border" Value="Blue"/>
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="DarkBlue"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="BorderBrush" TargetName="border" Value="DarkGray"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="DarkGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="RemoveButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border" CornerRadius="5"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="true">
            <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                       Margin="{TemplateBinding Padding}">
                <!--x:Name="Icon" - данное имя даётся элементу "fa:ImageAwesome" именно внутри шаблона для того, чтобы к нему можно было обратиться из триггеров <ControlTemplate.Triggers>,
                либо внутри привязок самого шаблона.-->
                <fa:ImageAwesome x:Name="Icon" 
                                 Height="12" 
                                 Icon="Solid_Times"
                                 Foreground="#FFAEAE"
                                 Margin="0,0,3,0" 
                                 Effect="{StaticResource ShadowDepth1}"/>
                <ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False"
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <!--<Trigger Property="IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="border" Value="White"/>
                <Setter Property="BorderBrush" TargetName="border" Value="Red"/>
                <Setter Property="Foreground" Value="Red"/>
                <Setter TargetName="Icon" Property="Foreground" Value="Red"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="WhiteSmoke"/>
                <Setter Property="BorderBrush" TargetName="border" Value="DarkRed"/>
                <Setter Property="Foreground" Value="DarkRed"/>
                <Setter TargetName="Icon" Property="Foreground" Value="OrangeRed"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="BorderBrush" TargetName="border" Value="DarkGray"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="DarkGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--<Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">-->
    <Style x:Key="CustomButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <!--Так как мы удалили (закомментировали) некоторые строки ( например, <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>), то кое-где у преподавателя получились ошибки
        при ссылке на эту строчку. Удалим (закомментируем) эти строки в вместо ссылки на ресурс просто укажем цвет:-->
        <!--<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>-->
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <!--<Setter Property="Template">-->
        <Setter Property="Template" Value="{StaticResource CustomButtonTemplate}">
            <!--<Setter.Value>-->
                <!--<ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            --><!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>--><!--
                            <Setter Property="Background" TargetName="border" Value="Blue"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            --><!--Добавим Foreground:--><!--
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            --><!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>--><!--
                            <Setter Property="Background" TargetName="border" Value="DarkBlue"/>
                            --><!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>--><!--
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            --><!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>--><!--
                            <Setter Property="BorderBrush" TargetName="border" Value="DarkGray"/>
                            --><!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>--><!--
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="DarkGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>-->
            <!--</Setter.Value>-->
        </Setter>
    </Style>

    <!--Добавим на эту кногпку иконку. Создадим новый стиль. Также создадим выше новый ControlTemplate и назовём его CheckButtonTemplate. Подключим пространство имём FontAwesome.
    Также слегка модифицируем ContentPresenter, поместив его в DockPanel и добавив галочку.-->
    
    <Style x:Key="CheckButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template" Value="{StaticResource CheckButtonTemplate}"/>
    </Style>

    <Style x:Key="RemoveButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Red"/>
        <Setter Property="BorderBrush" Value="WhiteSmoke"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template" Value="{StaticResource RemoveButtonTemplate}"/>
    </Style>

</ResourceDictionary>