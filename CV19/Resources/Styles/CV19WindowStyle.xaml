<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Определим стиль для всех кнопок:-->
    <Style x:Key="CV19WindowHeaderButtonStyle" TargetType="{x:Type Button}">
        <!--Запрещаем передавать фокус кнопкам:-->
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="BorderThickness" Value="0"/>
        
        <!--Определим шаблон прямо внутри самого стиля:-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!--Толщину и цвет рамки привязываем к стандартным параметрам кнопки:-->
                        <Border x:Name="PART_Border" Background="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter/>
                        </Border>
                    </Grid>

                    <!--Определим триггеры, которые будут по разному отображать кнопку в различных состояниях-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="LightSkyBlue"/>
                            <Setter TargetName="PART_Border" Property="Opacity" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="Blue"/>
                            <Setter TargetName="PART_Border" Property="Opacity" Value="1"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <!--Теперь применим этот стиль к нашим кнопкам в верхнем правом углу-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Geometry x:Key="MinimizeButtonIconGeometry">M0,8 H8 M0,7 H8 M0,6 H8</Geometry>
    <Geometry x:Key="MaximizeToMaxButtonIconGeometry">M0,0 H8 V8 H0 V0 M0,1 H8 M0,2 H8</Geometry>
    <Geometry x:Key="MaximizeToMinButtonIconGeometry">M0,3 H5 V8 H0 V3 M0,4 H5 M3,0 H8 V5 H7 M3,1 H8</Geometry>
    <Geometry x:Key="CloseButtonIconGeometry">M0,0 L8,8 M0,8 L8,0</Geometry>
    
    <!--Сделаем шаблон, который создаст визуальный стиль нашего окна:-->
    <ControlTemplate x:Key="CV19WindowTemplate" TargetType="{x:Type Window}">
        <!--Далее рисуем само окно:-->
        <Grid>
            <!--Для рамки нужно обязательно задать имя потому, что на это имя расчитывает стандартный шаблон окна и некоторые триггеры, т.е. логика, которая зашита
            именно в классе Window, ищет внутри содержимого окна объект с именем PART_Border. Цвет рамки BorderBrush можно указать вручную здесь, а можем привязаться к
            свойству BorderBrush, которое описано в самом окне, и мы можем указать, что для рамки внутри шаблона мы хотим выполнить связь со свойством родительского элемента
            (для типа Window), т.е. того, для чего рисуется шаблон. Для этого используется специальное расширение для привязки к свойствам TemplateBinding. Укажем, что
            свойство рамки BorderBrush должно быть связано со всвойством BorderBrash родительского элемента окна. Аналогично - толщина. Внутри рамки у на ничего не будет.
            Это просто визуальный элемент, который рисует прямоугольник:-->
            <Border Name="PART_Border"
                    Margin="7"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"/>
            <!--Внутри у нас будет ещё один Grid с именем PART_MainGrid для того, чтобы на него ссылаться в возможных триггерах или в логике работы самого окна.
            Точно также указываем, что у нас будет некоторый визуальный зазор снаружы, т.е. это будет пустая рамка, к который могут выходить какие-то дополнительные визуальные
            элементы, т.е. которые будут торчать как-бы визуально снаружи этого самого окна. Поэтому задаём отступы для Grid также на величину этого значения 7. Устанавливаем
            свойство Background, т.е. у нас будет визуально закрашенная область, и снаружи ещё по 7 точек с каждой стороны будут прозрачной рамкой, которую будет не видно.
            Указываем режим рендеринга текста для всех визуальных элементов, которые находятся внутри:-->
            <Grid x:Name="PART_MainGrid"
                  Margin="7"
                  Background="{TemplateBinding Background}"
                  TextOptions.TextRenderingMode="ClearType"
                  TextOptions.TextFormattingMode="Display">
                <!--Разместим контент окна. ContentPresenter указывает, где конкретно внутри этого шаблона будет размещено содержимое окна. Т.е., снаружи у нас будет общая таблица
                Grid,потом в эту таблицу будет помещена рамка окна потом будет размещена Grid, закрашенная в цвет фона окна, и внутри уже буде размещём специальный элемент
                ContentPresenter, который бцдет отображать само содержимое этого окна.-->
                <!--AdornerDecorator позволяет добавлять какие-то дополнительные визуальные элементы. Мы его добавляем вокруг ContentPresenter, чтобы в последствии другие
                системы смогли как-то декорировать содержимое окна.-->
                <!--Добавим заголовок окна с кнопками, а также какие-нибудь визуальные элементы, которые могут пригодиться для управления окном. В DockPanel мы сможем
                в разные части окна пристыковывать разные элементы:-->
                <DockPanel>
                    <Grid Name="PART_Titlebar" DockPanel.Dock="Top" Background="WhiteSmoke">
                        <DockPanel Height="32">

                            <!--В файле TestWindow.xaml в начале прописываем путь к нашей картинке Icon="../../Resources/WindowIcon.png".-->
                            <Image Name="PART_Icon" DockPanel.Dock="Left"
                                   Source="{TemplateBinding Icon}"/>

                            <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
                                <!--<Button>Min</Button>
                                <Button>Max</Button>
                                <Button>Close</Button>-->

                                <StackPanel.Resources>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CV19WindowHeaderButtonStyle}"></Style>
                                    
                                    <!--Необходимо установить стиль для элемента Path, иначе в кнопках ничего отображаться не будет:-->
                                    <Style TargetType="{x:Type Path}">
                                        <Setter Property="StrokeThickness" Value="2"/>
                                        <!--Цвет линии нужно привязать к цвету Foreground кнопки. В этом случае для кнопки, которая будет закрывать окно, мы сможем выставить
                                        Foreground="Red", и крестик станет красным за счёт этой привязки:--> 
                                        <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                        <Setter Property="Margin" Value="10"/>
                                    </Style>
                                </StackPanel.Resources>
                                <Button>
                                    <Path Data="{StaticResource MinimizeButtonIconGeometry}"/>                                    
                                </Button>
                                <Button>
                                    <Path Data="{StaticResource MaximizeToMaxButtonIconGeometry}"/>
                                </Button>
                                <Button Foreground="Red">
                                    <Path Data="{StaticResource CloseButtonIconGeometry}"/>
                                </Button>
                            </StackPanel>
                            
                            <!--<TextBlock Name="PART_Title" Text="123"/>-->

                            <!--Свойство Text элемента TextBlock привяжем к свойству Title:--> 
                            <TextBlock Name="PART_Title"
                                       Text="{TemplateBinding Title}"
                                       FontSize="12"
                                       FontFamily="Segoe UI"
                                       Margin="4,0,0,0"
                                       VerticalAlignment="Center"/>
                        </DockPanel>
                    </Grid>
                    <AdornerDecorator>
                        <ContentPresenter/>
                    </AdornerDecorator>
                </DockPanel>
            </Grid>
        </Grid>
    </ControlTemplate>
    
    <Style x:Key="CV19WindowStyle" TargetType="{x:Type Window}">
        <!--Для того, чтобы  нарисовать своё собственное окно так, как нам захочется, необходимо у окна выстаивть свойство,которое называется
        WindowsStyle в состояние None, убрав таким образом все визуальные элементы, которые рисует операционная система, т.е. меню окна, кнопки справа вверху и основ и основную рамку.
        Всё исчезает и остаётся только контент окна, и в этот контент окна мы сможем нарисовать свои собственные визуальные элементы, но тогда вся ответственность по поведению этого
        окна по масштабированию, сворачиванию, разворачиванию, закрытию лежит уже на нас. Это свойство мы установим в стиле:-->
        <Setter Property="WindowStyle" Value="None"/>

        <!--Для того, чтобы окно можно было рисовать с прозрачными элементами (например, с быркой посередине, в виде звезды), необходимо обеспечить возможность рисовать окно
        с прозрачными элементами для этого выставим следующее свойство (оно по умолчанию выключено):-->
        <Setter Property="AllowsTransparency" Value="True"/>
        
        <!--Нам необходимо добавить специальный зазор, в котором будут рисоваться технические элементы. Поэтому у окна надо добавить рамку:-->
        <Setter Property="BorderThickness" Value="7"/>
        
        <!--Добавим основные цвета. Есть класс SystemColors, в котором есть основные системные цвета:-->
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        
        <!--Обеспечиваем возможность масштабирования окна, которое нам придётся в последствии реализовать самостоятельно спомощью специальных визуальных элементов:-->
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        
        <!--Применим выше созданный шаблон в стиле:-->
        <Setter Property="Template" Value="{StaticResource CV19WindowTemplate}"/>
    </Style>
    
</ResourceDictionary>