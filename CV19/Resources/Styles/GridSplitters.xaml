<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <Style x:Key="DefaultGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <!--<Setter Property="Background" Value="Transparent"/>-->
        <!--Обращаться к ресурсам можно двумя способами:
        1. Чаще всего можно встретить способ статического ресурса. Он производит одноразовое связывание. Т.е., в мометн разбора разметки <Style></Style>
        и создания объектов из словаря ресурсов будет извлечён ресурс TransparentBrush и установлен как значение свойства Value, и после этого свойство
        Value у нас больше меняться не будет:-->
        <!--<Setter Property="Background" Value="{StaticResource TransparentBrush}"/>-->
        <!--2. Второй ариант - это DynamicResource. Если просто так написать Value="{DynamicResource TransparentBrush}, то сначала разницы не будет никакой.
        Но динамический ресурс начинает отслеживать ключ TransparentBrush в словаре, т.е. как только по этому ключу происходит изменение значения,
        т.е. мы программным образом установим новое значение в ресурсах по этому ключу, то привязка DynamicResource установит значение свойства TransparentBrush
        в новое. Таким образом можно динамически менять оформление подменяя стили и шаблоны, кисти и т.д. с помощью динамического связывания. Это позволяет
        менять скины для приложения.
        Но, при этом свойство Value, которому мы присваиваем значение должно быть свойством зависимости. Т.е. к обычным свойствам, если взять Вью-Модель
        и попытаться выполнить динамическую установку ресурса, то система нам скажет, что это так не работает.-->
        <Setter Property="Background" Value="{DynamicResource TransparentBrush}"/>
        <!--Свойство ZIndex позволяет изменять положение элемента поверх других-->
        <Setter Property="Panel.ZIndex" Value="10000"/>
        <!--В зависимости от того, вертикально или горизонтально расположен Splitter, доолжна быть задана ширина или высота. Поэтому добавляем триггер:-->
        <Style.Triggers>
            <Trigger Property="HorizontalAlignment" Value="Stretch">
                <Setter Property="Height" Value="3"/>
            </Trigger>
            <Trigger Property="VerticalAlignment" Value="Stretch">
                <Setter Property="Width" Value="3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource DefaultGridSplitterStyle}"/>

    <!--Подключим данный словарь ресурсов на уровне всего приложения в файле App.xaml.-->
</ResourceDictionary>